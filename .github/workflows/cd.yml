name: Continuous Deployment

on:
  push:
    branches: [ main, test ]
  workflow_dispatch: # Manual trigger

jobs:
  wait-for-ci:
    name: Wait for CI completion
    runs-on: ubuntu-latest
    outputs:
      ci-success: ${{ steps.check-ci.outputs.success }}
    
    steps:
      - name: Wait for CI workflow
        id: wait
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.sha }}
          check-name: 'Continuous Integration'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success

      - name: Check CI completion manually
        id: check-ci
        run: |
          echo "Checking CI completion..."
          # Use GitHub API to check CI status
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs?check_name=Continuous+Integration")
          
          echo "API Response: $response"
          
          # Check if CI completed successfully
          conclusion=$(echo "$response" | jq -r '.check_runs[0].conclusion // "null"')
          status=$(echo "$response" | jq -r '.check_runs[0].status // "null"')
          
          echo "CI Status: $status"
          echo "CI Conclusion: $conclusion"
          
          if [ "$status" = "completed" ] && [ "$conclusion" = "success" ]; then
            echo "CI completed successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "CI not completed or failed"
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug CI outputs
        run: |
          echo "Manual CI Success: '${{ steps.check-ci.outputs.success }}'"
          echo "Will deploy: ${{ steps.check-ci.outputs.success == 'true' }}"

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: wait-for-ci
    if: needs.wait-for-ci.outputs.ci-success == 'true'
    environment: test-ec2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build client
        run: npm run client:build

      - name: Build server
        run: npm run server:build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          # Create proper directory structure
          mkdir -p deployment/client
          mkdir -p deployment/server
          
          # Copy client files
          cp -r client/dist deployment/client/
          cp client/package.json deployment/client/
          
          # Copy server files
          cp -r server/dist deployment/server/
          cp server/package.json deployment/server/
          
          # Copy root files
          cp docker-compose.yml deployment/
          cp docker-compose.dev.yml deployment/
          cp Dockerfile deployment/
          cp package.json deployment/
          
          tar -czf deployment.tar.gz -C deployment .

      - name: Debug connection info
        run: |
          echo "EC2_HOST: '${{ secrets.EC2_HOST }}'"
          echo "EC2_HOST length: $(echo '${{ secrets.EC2_HOST }}' | wc -c)"
          echo "EC2_USERNAME: '${{ secrets.EC2_USERNAME }}'"
          echo "EC2_PORT: '${{ secrets.EC2_PORT }}'"
          echo "SSH_KEY length: $(echo '${{ secrets.EC2_SSH_KEY }}' | wc -c)"
          echo "SSH_KEY starts with: $(echo '${{ secrets.EC2_SSH_KEY }}' | head -c 50)"
          echo "SSH_KEY ends with: $(echo '${{ secrets.EC2_SSH_KEY }}' | tail -c 50)"

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          # Save SSH key to file
          echo '${{ secrets.EC2_SSH_KEY }}' > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          # Test SSH connection with timeout
          timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i /tmp/ssh_key \
            -p ${{ secrets.EC2_PORT || 22 }} \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            "echo 'SSH connection successful'" || echo "SSH connection failed"
          
          # Clean up
          rm -f /tmp/ssh_key

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            # Create application directory
            sudo mkdir -p /opt/novisit
            cd /opt/novisit
            
            # Stop existing services
            sudo docker-compose down || echo "No existing services to stop"
            
            # Backup current deployment (if exists)
            if [ -d "current" ]; then
              sudo mv current backup-$(date +%Y%m%d-%H%M%S) || echo "No current deployment to backup"
            fi
            
            # Create new deployment directory
            sudo mkdir -p current

      - name: Check deployment package
        run: |
          echo "Checking deployment package..."
          ls -la deployment.tar.gz
          echo "Package size: $(du -h deployment.tar.gz)"

      - name: Upload deployment package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/home/${{ secrets.EC2_USERNAME }}/"

      - name: Move deployment package to final location
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            # Move package to final location with proper permissions
            sudo mv /home/${{ secrets.EC2_USERNAME }}/deployment.tar.gz /opt/novisit/current/
            sudo chown ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} /opt/novisit/current/deployment.tar.gz
            ls -la /opt/novisit/current/

      - name: Extract and setup deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            cd /opt/novisit/current
            
            # Set proper permissions BEFORE extraction
            sudo chown -R $USER:$USER /opt/novisit/current
            
            # Extract deployment package
            tar -xzf deployment.tar.gz
            rm deployment.tar.gz
            
            # Debug: List extracted files
            echo "=== Extracted files ==="
            ls -la
            
            # Check if docker-compose.yml exists
            if [ -f "docker-compose.yml" ]; then
              echo "✅ docker-compose.yml found"
            else
              echo "❌ docker-compose.yml not found"
              echo "Available files:"
              find . -name "*.yml" -o -name "*.yaml"
            fi
            
            # Check if required package.json files exist
            echo "=== Checking package.json files ==="
            if [ -f "client/package.json" ]; then
              echo "✅ client/package.json found"
            else
              echo "❌ client/package.json not found"
            fi
            
            if [ -f "server/package.json" ]; then
              echo "✅ server/package.json found"
            else
              echo "❌ server/package.json not found"
            fi
            
            if [ -f "package.json" ]; then
              echo "✅ root package.json found"
            else
              echo "❌ root package.json not found"
            fi
            
            # Set proper permissions after extraction
            sudo chown -R $USER:$USER /opt/novisit/current
            
            # Create environment file
            cat > server/.env << EOF
            NODE_ENV=production
            PORT=5000
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            EOF
            
            # Start services with Docker Compose
            sudo docker-compose up -d --build
            
            # Wait for services to be ready
            sleep 30
            
            # Health check (optional - remove if health endpoint doesn't exist)
            curl -f http://localhost:5000/health || echo "Health check failed, but continuing..."
            
            # Cleanup old backups (keep last 5)
            cd /opt/novisit
            ls -t backup-* | tail -n +6 | xargs -r sudo rm -rf

      - name: Notify deployment status
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            echo "Deployment ${{ job.status }} at $(date)"
            if [ "${{ job.status }}" = "success" ]; then
              echo "✅ Deployment successful!"
              echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}:5000"
            else
              echo "❌ Deployment failed!"
            fi